#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer'

module Lani
  class Parser < Racc::Parser

module_eval(<<'...end lani.y/module_eval...', 'lani.y', 27)

def filename
  @filename
end

def on_error(t, val, vstack)
  raise ParseError, sprintf("\nparse error on value %s (%s) #{@filename}:#{@line}",
      val.inspect, token_to_str(t) || '?')
end

...end lani.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     5,     8,     9 ]

racc_action_check = [
     0,     0,     1,     8 ]

racc_action_pointer = [
    -2,     2,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil ]

racc_action_default = [
    -2,    -8,    -1,    -3,    -4,    -5,    -6,    -7,    -8,    10 ]

racc_goto_table = [
     1,     2,     3,     6,     7 ]

racc_goto_check = [
     1,     2,     3,     4,     5 ]

racc_goto_pointer = [
   nil,     0,     1,     2,     3,     4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 6, :_reduce_none,
  0, 7, :_reduce_2,
  1, 7, :_reduce_3,
  1, 9, :_reduce_4,
  1, 9, :_reduce_5,
  1, 10, :_reduce_none,
  1, 8, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER => 2,
  :FLOAT => 3,
  :ADD => 4 }

racc_nt_base = 5

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER",
  "FLOAT",
  "ADD",
  "$start",
  "root",
  "program",
  "expressions",
  "number",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'lani.y', 9)
  def _reduce_2(val, _values)
     AST::Program.new( filename, lineno, [])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 10)
  def _reduce_3(val, _values)
     AST::Program.new( filename, lineno, val[0])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 13)
  def _reduce_4(val, _values)
     AST::IntegerNode.new( filename, lineno, val[0])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 14)
  def _reduce_5(val, _values)
     AST::FloatNode.new( filename, lineno, val[0])
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'lani.y', 18)
  def _reduce_7(val, _values)
     [val[0]] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Lani


