#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer'

module Lani
  class Parser < Racc::Parser

module_eval(<<'...end lani.y/module_eval...', 'lani.y', 47)

def filename
  @filename
end

alias_method :parse_string, :scan_str

def pre_exe
  []
end

def on_error(t, val, vstack)
  raise ParseError, sprintf("\nparse error on value %s (%s) #{@filename}:#{@line}",
      val.inspect, token_to_str(t) || '?')
end

...end lani.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     5,     4,     5,     4,     5,     4,     5,     8,    10,
     8,    12,     8,    18,     8,     4,     5,     4,     5,     4,
     5,    16,    17,     8,   nil,     8,   nil,     8,    14,    15,
    16,    17,   nil,    20,    14,    15,    16,    17,    14,    15,
    16,    17,    16,    17 ]

racc_action_check = [
     0,     0,     8,     8,    11,    11,    14,    14,     0,     1,
     8,     3,    11,    10,    14,    15,    15,    16,    16,    17,
    17,    21,    21,    15,   nil,    16,   nil,    17,    13,    13,
    13,    13,   nil,    13,     9,     9,     9,     9,    19,    19,
    19,    19,    22,    22 ]

racc_action_pointer = [
    -2,     9,   nil,     3,   nil,   nil,   nil,   nil,     0,    30,
    13,     2,   nil,    24,     4,    13,    15,    17,   nil,    34,
   nil,    15,    36,   nil,   nil ]

racc_action_default = [
    -2,   -16,    -1,    -3,    -4,    -5,    -6,    -7,   -16,   -13,
   -16,   -16,   -15,   -16,   -16,   -16,   -16,   -16,    25,   -14,
    -8,    -9,   -10,   -11,   -12 ]

racc_goto_table = [
     9,     1,     2,     3,    11,   nil,   nil,   nil,    13,   nil,
   nil,    19,   nil,   nil,    21,    22,    23,    24 ]

racc_goto_check = [
     5,     1,     2,     3,     7,   nil,   nil,   nil,     5,   nil,
   nil,     5,   nil,   nil,     5,     5,     5,     5 ]

racc_goto_pointer = [
   nil,     1,     2,     3,   nil,     0,   nil,     1 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     6,   nil,     7,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 12, :_reduce_none,
  0, 13, :_reduce_2,
  1, 13, :_reduce_3,
  1, 15, :_reduce_4,
  1, 15, :_reduce_5,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  3, 16, :_reduce_8,
  3, 17, :_reduce_9,
  3, 17, :_reduce_10,
  3, 17, :_reduce_11,
  3, 17, :_reduce_12,
  1, 14, :_reduce_13,
  3, 14, :_reduce_14,
  1, 18, :_reduce_none ]

racc_reduce_n = 16

racc_shift_n = 25

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER => 2,
  :FLOAT => 3,
  :ADD => 4,
  :SUBTRACT => 5,
  :MULTIPLY => 6,
  :DIVIDE => 7,
  :NEWLINE => 8,
  :RPAREN => 9,
  :LPAREN => 10 }

racc_nt_base = 11

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER",
  "FLOAT",
  "ADD",
  "SUBTRACT",
  "MULTIPLY",
  "DIVIDE",
  "NEWLINE",
  "RPAREN",
  "LPAREN",
  "$start",
  "root",
  "program",
  "expressions",
  "number",
  "expression",
  "binary_operation",
  "terminator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'lani.y', 20)
  def _reduce_2(val, _values)
     AST::Program.new( filename, lineno, [])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 21)
  def _reduce_3(val, _values)
     AST::Program.new( filename, lineno, val[0])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 23)
  def _reduce_4(val, _values)
     AST::IntegerNode.new( filename, lineno, val[0])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 24)
  def _reduce_5(val, _values)
     AST::FloatNode.new( filename, lineno, val[0])
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'lani.y', 28)
  def _reduce_8(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 30)
  def _reduce_9(val, _values)
    AST::AddNode.new( filename, lineno, val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 31)
  def _reduce_10(val, _values)
    AST::SubtractNode.new( filename, lineno, val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 32)
  def _reduce_11(val, _values)
    AST::MultiplyNode.new( filename, lineno, val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 33)
  def _reduce_12(val, _values)
    AST::DivideNode.new( filename, lineno, val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 35)
  def _reduce_13(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'lani.y', 36)
  def _reduce_14(val, _values)
     val[0] << val[2] 
  end
.,.,

# reduce 15 omitted

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Lani


