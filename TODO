# CREATING A CLOSURE

When we initialize the node, we need to create a new scope, and later we nest it to our current one in the bytecode method.

We need to create a new generator, and assign the new scope to it. We need to do this because we need a new generator to compile every method. 

In the NEW generator:

  * Push the scope (push_state)
  * [ some generator setup boilerplate ]

  * Compile arguments passed to the function
  * Push a block
    * Compile the body of a function
  * Pop a block

  * Pop the scope (pop_state) -- it's in finalize

  * [ some generator finalize boilerplate ]

In our CURRENT generator:

  g.create_block my_new_generator

  And there you go: our closure is a beautiful object on the stack.
